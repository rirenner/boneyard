#!/bin/env python

#This script will check CDP output against a static cablemap file to see if there
#are any differences between the two.  If there are it flags the differences with
#a warning in syslog.
#
#Cablemap file entries should contain hostname||Localport||type||remote port
#Sample:
# 
#c9396t-camden-rufus||Eth2/1||N9K-C9396TX||Eth2/1
#c9372b-dean(SAL190389CH)||Eth2/3||N9K-C9372TX||Eth1/49
#c9372t-fred||Eth2/5||N9K-C9372TX||Eth1/49

import os
import time
from cli import *
import cisco
import re
import sys

# system and kickstart images, configuration: location on server (src) and target (dst)

#older image: n9000-dk9.6.1.2.I3.1.bin
#newer image: n9000-dk9.6.1.2.I3.4.bin
system_image_dst        = "bootflash:n9000-dk9.6.1.2.I3.4.bin"
image_dir_dst           = "bootflash:n9000-dk9.6.1.2.I3.4.bin"

config_file_src         = "/demo_poap.cfg" 
config_file_dst         = "bootflash:demo_poap.cfg"

cablemap_src         = "/cablemap" 
cablemap_dst         = "bootflash:cablemap"
cablemap_openname    = "/bootflash/cablemap"

md5sum_ext_src          = "md5"
# Required space on /bootflash (for config and system images)
required_space          = 350000

# copy protocol to download images and config
# options are: scp/http/tftp/ftp/sftp
protocol                = "http" # protocol to use to download images/config

# Host name and user credentials
username                = "root" # tftp server account
password                = "root"
#hostname                = "10.95.33.181"
hostname                = "10.10.10.1"

# vrf info
vrf = "management"

# Timeout info (from biggest to smallest image, should be f(image-size, protocol))
system_timeout          = 2100 
config_timeout          = 120 
md5sum_timeout          = 120  

# POAP can use 3 modes to obtain the config file.
# - 'static' - filename is static
# - 'serial_number' - switch serial number is part of the filename
# - 'location' - CDP neighbor of interface on which DHCPDISCOVER arrived
#                is part of filename
# if serial-number is abc, then filename is $config_file_src.abc
# if cdp neighbor's device_id=abc and port_id=111, then filename is config_file_src.abc_111
# Note: the next line can be overwritten by command-line arg processing later
config_file_type        = "static"

# parameters passed through environment:
# TODO: use good old argv[] instead, using env is bad idea.
# pid is used for temp file name: just use getpid() instead!
# serial number should be gotten from "show version" or something!
pid=""
if os.environ.has_key('POAP_PID'):
    pid=os.environ['POAP_PID']
serial_number=None
if os.environ.has_key('POAP_SERIAL'):
    serial_number=os.environ['POAP_SERIAL']
cdp_interface=None
if os.environ.has_key('POAP_INTF'):
    cdp_interface=os.environ['POAP_INTF']

# will append date/timespace into the name later
log_filename = "/bootflash/poap.log"
t=time.localtime()
now="%d_%d_%d" % (t.tm_hour, t.tm_min, t.tm_sec)
#now=None
#now=1 # hardcode timestamp (easier while debugging)

# **** end of parameters **** 
# *************************************************************

# ***** argv parsing and online help (for test through cli) ******
# ****************************************************************

# poap.bin passes args (serial-number/cdp-interface) through env var
# for no seeminly good reason: we allow to overwrite those by passing
# argv, this is usufull when testing the script from vsh (even simple
# script have many cases to test, going through a reboto takes too long)

import sys
import re

cl_cdp_interface=None  # Command Line version of cdp-interface
cl_serial_number=None  # can overwrite the corresp. env var
cl_protocol=None       # can overwride the script's default
cl_download_only=None  # dont write boot variables

def parse_args(argv, help=None):
    global cl_cdp_interface, cl_serial_number, cl_protocol, protocol, cl_download_only
    while argv:
        x = argv.pop(0)
        # not handling duplicate matches...
        if cmp('cdp-interface'[0:len(x)], x) == 0:
          try: cl_cdp_interface = argv.pop(0)
          except: 
             if help: cl_cdp_interface=-1
          if len(x) != len('cdp-interface') and help: cl_cdp_interface=None
          continue
        if cmp('serial-number'[0:len(x)], x) == 0:
          try: cl_serial_number = argv.pop(0)
          except: 
            if help: cl_serial_number=-1
          if len(x) != len('serial-number') and help: cl_serial_number=None
          continue
        if cmp('protocol'[0:len(x)], x) == 0:
          try: cl_protocol = argv.pop(0); 
          except: 
            if help: cl_protocol=-1
          if len(x) != len('protocol') and help: cl_protocol=None
          if cl_protocol: protocol=cl_protocol
          continue
        if cmp('download-only'[0:len(x)], x) == 0:
          cl_download_only = 1
          continue
        print "Syntax Error|invalid token:", x
        exit(-1)
  

########### display online help (if asked for) #################
nb_args = len(sys.argv)
if nb_args > 1:
  m = re.match('__cli_script.*help', sys.argv[1])
  if m:
    # first level help: display script description
    if sys.argv[1] == "__cli_script_help":
      print "loads system/kickstart images and config file for POAP\n"
      exit(0)
    # argument help
    argv = sys.argv[2:]
    # dont count last arg if it was partial help (no-space-question-mark)
    if sys.argv[1] == "__cli_script_args_help_partial":
      argv = argv[:-1]
    parse_args(argv, "help")
    if cl_serial_number==-1:
      print "WORD|Enter the serial number"
      exit(0)
    if cl_cdp_interface==-1:
      print "WORD|Enter the CDP interface instance"
      exit(0)
    if cl_protocol==-1:
      print "tftp|Use tftp for file transfer protocol"
      print "ftp|Use ftp for file transfer protocol"
      print "scp|Use scp for file transfer protocol"
      exit(0)
    if not cl_serial_number:
      print "serial-number|The serial number to use for the config filename"
    if not cl_cdp_interface:
      print "cdp-interface|The CDP interface to use for the config filename"
    if not cl_protocol:
      print "protocol|The file transfer protocol"
    if not cl_download_only:
      print "download-only|stop after download, dont write boot variables"
    print "<CR>|Run it (use static name for config file)"
    # we are done
    exit(0)

# *** now overwrite env vars with command line vars (if any given)
# if we get here it is the real deal (no online help case)

argv = sys.argv[1:]
parse_args(argv)
if cl_serial_number: 
    serial_number=cl_serial_number
    config_file_type = "serial_number"
if cl_cdp_interface: 
    cdp_interface=cl_cdp_interface
    config_file_type = "location"
if cl_protocol: 
    protocol=cl_protocol


# setup log file and associated utils

if now == None:
  now=cli("show clock | sed 's/[ :]/_/g'");
try:
    log_filename = "%s.%s" % (log_filename, now)
except Exception as inst:
    print inst
poap_log_file = open(log_filename, "w+")

def poap_log (info):
    poap_log_file.write(info)
    poap_log_file.write("\n")
    poap_log_file.flush()
    print "poap_py_log:" + info
    sys.stdout.flush()

def poap_log_close ():
    poap_log_file.close()

def abort_cleanup_exit () : 
    poap_log("INFO: cleaning up")
    poap_log_close()
    exit(-1)


# some argument sanity checks:

if config_file_type == "serial_number" and serial_number == None: 
    poap_log("ERR: serial-number required (to derive config name) but none given")
    exit(-1)

if config_file_type == "location" and cdp_interface == None: 
    poap_log("ERR: interface required (to derive config name) but none given")
    exit(-1)

# figure out what kind of box we have (to download the correct image)
try: 
  r=clid("show version")
  m = re.match('Nexus9000', r["chassis_id/1"])
  if m:
    box="n9k"
  else:
    m = re.match('Nexus7000', r["chassis_id"])
    if m: 
      box="n7k"
      m = re.match('.*module-2', r["module_id"])
      if m: box="n7k2"
    else: box="n9k"
except: box="n9k"
print "box is", box

# get final image name based on actual box
try: root_path      = eval("%s_%s" % (protocol , "image_dir_src_root"), globals())
except: root_path   = ""
try: username       = eval("%s_%s" % (protocol , "username"), globals())
except: pass

# cleanup stuff from a previous run
# by deleting the tmp destination for image files and then recreating the
# directory
image_dir_dst_u="/%s" % image_dir_dst.replace(":", "/") # unix path: cli's rmdir not working!

import shutil
try: shutil.rmtree("%s.new" % image_dir_dst_u)
except: pass
os.mkdir("%s.new" % image_dir_dst_u)

if not os.path.exists(image_dir_dst_u):
    os.mkdir(image_dir_dst_u)

import signal
import string

# utility functions

def run_cli (cmd):
    poap_log("CLI : %s" % cmd)
    return cli(cmd)

def rm_rf (filename): 
    try: cli("delete %s" % filename)
    except: pass

# signal handling

def sig_handler_no_exit (signum, frame) : 
    poap_log("INFO: SIGTERM Handler while configuring boot variables")

def sigterm_handler (signum, frame): 
    poap_log("INFO: SIGTERM Handler") 
    abort_cleanup_exit()
    exit(1)

signal.signal(signal.SIGTERM, sigterm_handler)

# transfers file, return True on success; on error exits unless 'fatal' is False in which case we return False
def doCopy (protocol = "", host = "", source = "", dest = "", vrf = "management", login_timeout=10, user = "", password = "", fatal=True):
    rm_rf(dest)

    # mess with source paths (tftp does not like full paths)
    global username, root_path
    source = source[len(root_path):]

    cmd = "terminal dont-ask ; terminal password %s ; " % password
    if protocol == "http":
        cmd += "copy %s://%s%s %s vrf %s" % (protocol, host, source, dest, vrf)
    else :
        cmd += "copy %s://%s@%s%s %s vrf %s" % (protocol, username, host, source, dest, vrf)

    try: run_cli(cmd)
    except:
        poap_log("WARN: Copy Failed: %s" % str(sys.exc_value).strip('\n\r'))
        if fatal:
            poap_log("ERR : aborting")
            abort_cleanup_exit()
            exit(1)
        return False
    return True


def get_md5sum_src (file_name):
    md5_file_name_src = "%s.%s" % (file_name, md5sum_ext_src)
    md5_file_name_dst = "volatile:%s.poap_md5" % os.path.basename(md5_file_name_src)
    rm_rf(md5_file_name_dst)

    ret=doCopy(protocol, hostname, md5_file_name_src, md5_file_name_dst, vrf, md5sum_timeout, username, password, False)
    if ret == True:
        sum=run_cli("show file %s | grep -v '^#' | head lines 1 | sed 's/ .*$//'" % md5_file_name_dst).strip('\n')
        poap_log("INFO: md5sum %s (.md5 file)" % sum)
        rm_rf(md5_file_name_dst)
        return sum
    return None
    # if no .md5 file, and text file, could try to look for an embedded checksum (see below)


def check_embedded_md5sum (filename):
    # extract the embedded checksum
    sum_emb=run_cli("show file %s | grep '^#md5sum' | head lines 1 | sed 's/.*=//'" % filename).strip('\n')
    if sum_emb == "":
        poap_log("INFO: no embedded checksum")
        return None
    poap_log("INFO: md5sum %s (embedded)" % sum_emb)

    # remove the embedded checksum (create temp file) before we recalculate
    cmd="show file %s exact | sed '/^#md5sum=/d' > volatile:poap_md5" % filename
    run_cli(cmd)
    # calculate checksum (using temp file without md5sum line)
    sum_dst=run_cli("show file volatile:poap_md5 md5sum").strip('\n')
    poap_log("INFO: md5sum %s (recalculated)" % sum_dst)
    try: run_cli("delete volatile:poap_md5")
    except: pass
    if sum_emb != sum_dst:
        poap_log("ERR : MD5 verification failed for %s" % filename)
        abort_cleanup_exit()

    return None

def get_md5sum_dst (filename):
    sum=run_cli("show file %s md5sum" % filename).strip('\n')
    poap_log("INFO: md5sum %s (recalculated)" % sum)
    return sum  

def check_md5sum (filename_src, filename_dst, lname):
    md5sum_src = get_md5sum_src(filename_src)
    if md5sum_src: # we found a .md5 file on the server
        md5sum_dst = get_md5sum_dst(filename_dst)
        if md5sum_dst != md5sum_src:
            poap_log("ERR : MD5 verification failed for %s! (%s)" % (lname, filename_dst))
            abort_cleanup_exit()

def same_images (filename_src, filename_dst):
    if os.path.exists(image_dir_dst_u):
        md5sum_src = get_md5sum_src(filename_src)
        if md5sum_src:
            md5sum_dst = get_md5sum_dst(filename_dst)
            if md5sum_dst == md5sum_src:
                poap_log("INFO: Same source and destination images" ) 
                return True
    poap_log("INFO: Different source and destination images" ) 
    return False

# Will run our CLI command to test MD5 checksum and if files are valid images
# This check is also performed while setting the boot variables, but this is an
# additional check

def get_version (msg):
    lines=msg.split("\n") 
    for line in lines:
        index=line.find("MD5")
        if (index!=-1):
            status=line[index+17:]

        index=line.find("kickstart:")
        if (index!=-1): 
            index=line.find("version")
            ver=line[index:]
            return status,ver

        index=line.find("system:")
        if (index!=-1):
            index=line.find("version")
            ver=line[index:]
            return status,ver
    
def verify_images2 ():
    sys_cmd="show version image %s" % system_image_dst
    sys_msg=cli(sys_cmd)

    sys_s,sys_v=get_version(sys_msg)    
    
    print "Value: %s and %s" % (kick_s, sys_s)
    if (kick_s == "Passed" and sys_s == "Passed"):
        # MD5 verification passed
        if(kick_v != sys_v): 
            poap_log("ERR : Image version mismatch. (kickstart : %s) (system : %s)" % (kick_v, sys_v))
            abort_cleanup_exit()
    else:
        poap_log("ERR : MD5 verification failed!")
        poap_log("%s\n%s" % (kick_msg, sys_msg))
        abort_cleanup_exit()
    poap_log("INFO: Verification passed. (kickstart : %s) (system : %s)" % (kick_v, sys_v))
    poap_log("JP1")
    return True

def verify_images ():
    print "show version image %s" % system_image_dst
    sys_cmd="show version image %s" % system_image_dst
    sys_msg=cli(sys_cmd)
    sys_v=sys_msg.split()
    poap_log("JP2")
    print "system image Values: %s " % (sys_v[2])
    print "system image Values v10 is : %s" % (sys_v[10])
    if (sys_v[2] == "Passed"):
        poap_log("INFO: Verification passed. (system : %s)" % (sys_v[10]))
    else:
        poap_log("ERR : MD5 verification failed!")
        poap_log("%s" % (sys_msg))
        abort_cleanup_exit()
    poap_log("INFO: Verification passed.  (system : %s)" % (sys_v[10]))
    poap_log("JP3")
    return True

def verify_images ():
    print "show version image %s" % system_image_dst
    sys_cmd="show version image %s" % system_image_dst
    sys_msg=cli(sys_cmd)
    sys_v=sys_msg.split()
    poap_log("JP2")
    print "system image Values: %s " % (sys_v[2])
    print "system image Values v10 is : %s" % (sys_v[10])
    if (sys_v[2] == "Passed"):
        poap_log("INFO: Verification passed. (system : %s)" % (sys_v[10]))
    else:
        poap_log("ERR : MD5 verification failed!")
        poap_log("%s" % (sys_msg))
        abort_cleanup_exit()
    poap_log("INFO: Verification passed.  (system : %s)" % (sys_v[10]))
    poap_log("JP3")
    return True

def verify_cablemap ():

    poap_log("INFO: Copying cable map file")
    #doCopy(protocol, hostname, cablemap_src, cablemap_dst, vrf, \
    #       config_timeout, username, password)
  
    # Lets flip on all interfaces to ensure we can get cdp info
    poap_log("INFO: Enabling interfaces to gather CDP information")
    tp = cisco.Interface.interfaces()
    for tpint in tp:
        intf = cisco.Interface(tpint)
        intf.set_state()

    # Sleep for two minutes to allow for CDP information to populate 
    time.sleep(120)

    poap_log("INFO: Grabbing CDP Information")
    text = cli("show cdp nei | beg Device-ID | no-more")
    #poap_log("%s" % (text))

    lines = text.split('\n')
    del lines[0]
    del lines[-3:-1]

    # This coded is needed to ensure the cdp output format is normalized
    prevline = ""
    newlines = []
    for line in lines:
        line = prevline + line
        prevline = ""
        m = re.match(r'^\S*$', line)
        if m:
            prevline = line
        else:
            removespace = re.sub(' +',' ', line)
            newlines.append(removespace.rstrip())

    # finalcdp is a list containing CDP output entries
    finalcdp = []
    for line in newlines:
        ll = line.split(' ')
        lentry = ll[0] + "||" + ll[1] + "||" + ll[-2] + "||" + ll[-1]
        finalcdp.append(lentry)

    # Now read the cable map file and compare 
    poap_log("INFO: Opening cablemap file")
    for line in open(cablemap_openname):
        entry = line.rstrip()
        if entry not in finalcdp:
            poap_log("WARN: Found cable map entry not in CDP %s:" % entry)
        else:
            finalcdp.pop(finalcdp.index(entry))

    for line in finalcdp:
        poap_log("WARN: Found CDP entry not in cable map file: %s" % line)

    return True

# get config file from server
def get_config ():
    doCopy(protocol, hostname, config_file_src, config_file_dst, vrf, config_timeout, username, password)
    poap_log("INFO: Completed Copy of Config File") 
    # get file's md5 from server (if any) and verify it, failure is fatal (exit)
    #check_md5sum (config_file_src, config_file_dst, "config file")


def wait_box_online ():
    while 1:
        r=int(run_cli("show system internal platform internal info | grep box_online | sed 's/[^0-9]*//g'").strip('\n'))
        if r==1: break
        else: time.sleep(5)
        poap_log("INFO: Waiting for box online...")


# install (make persistent) images and config 
def install_it (): 
    global cl_download_only
    if cl_download_only: exit(0)
    timeout = -1

    # make sure box is online
    wait_box_online()
    verify_cablemap()

    poap_log("INFO: Setting the boot variables")
    try:
        run_cli("config terminal ; boot nxos %s" % system_image_dst)
        run_cli("copy running-config startup-config")
        run_cli('copy %s scheduled-config' % config_file_dst)
    except:
        poap_log("ERR : setting bootvars or copy run start failed!")
        abort_cleanup_exit()
    # no need to delete config_file_dst, it is in /volatile, we will reboot....
    # do it anyway so we don't have permission issues when testing script and
    # running as different users (log file have timestamp, so fine)
    poap_log("INFO: Configuration successful")

        
# Verify if free space is available to download config, kickstart and system images
def verify_freespace (): 
    freespace = int(cli("dir bootflash: | last 3 | grep free | sed 's/[^0-9]*//g'").strip('\n'))
    freespace = freespace / 1024
    poap_log("INFO: free space is %s kB"  % freespace )

    if required_space > freespace:
        poap_log("ERR : Not enough space to copy the config, kickstart image and system image, aborting!")
        abort_cleanup_exit()


# figure out config filename to download based on serial-number
def set_config_file_src_serial_number (): 
    global config_file_src
    config_file_src = "%s.%s" % (config_file_src, serial_number)
    poap_log("INFO: Selected config filename (serial-nb) : %s" % config_file_src)


if config_file_type == "serial_number": 
    #set source config file based on switch's serial number
    set_config_file_src_serial_number()


# finaly do it

verify_freespace()
verify_images()
get_config()

# dont let people abort the final stage that concretize everything
# not sure who would send such a signal though!!!! (sysmgr not known to care about vsh)
signal.signal(signal.SIGTERM, sig_handler_no_exit)
install_it()

poap_log_close()

exit(0)
