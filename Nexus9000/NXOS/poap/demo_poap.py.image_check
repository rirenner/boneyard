#!/bin/env python

import os
import time
from cli import *
import cisco
import re
import sys


# This script works off of image versions.  It assumes users are using
# standard nexus 9000 filenames and will place target images in bootflash:
# This script will check image versions to ensure the image running matches
# desired version, if not it will attempt to load the desired image version.

desired_version         = "6.1(2)I3(4)"

config_file_src         = "/demo_poap.cfg" 
config_file_dst         = "bootflash:demo_poap.cfg"

# Required space on /bootflash (for config and system images)
required_space          = 350000

# copy protocol to download images and config
# options are: scp/http/tftp/ftp/sftp
protocol                = "http" # protocol to use to download images/config

# Host name and user credentials
username                = "root" # tftp server account
password                = "root"
hostname                = "10.10.10.1"

# vrf info
vrf = "management"

# Timeout info (from biggest to smallest image, should be f(image-size, protocol))
system_timeout          = 2100 
config_timeout          = 120 
md5sum_timeout          = 120  

#Log file information
log_filename = "/bootflash/poap.log"
t=time.localtime()
now="%d_%d_%d" % (t.tm_hour, t.tm_min, t.tm_sec)

# **** end of parameters **** 
# *************************************************************


import sys
import re

# Convert desired version to image name and location on bootflash
sys1 = desired_version.replace("(", ".")
system_image_src = "/%s%s%s" % ("n9000-dk9.", sys1.replace(")", "."), "bin")
system_image_dst = image_dir_dst = "%s%s%s" % ("bootflash:n9000-dk9.", sys1.replace(")", "."), "bin")

# Set up log file and associated utils
if now == None:
  now=cli("show clock | sed 's/[ :]/_/g'");
try:
    log_filename = "%s.%s" % (log_filename, now)
except Exception as inst:
    print inst
poap_log_file = open(log_filename, "w+")

def poap_log (info):
    poap_log_file.write(info)
    poap_log_file.write("\n")
    poap_log_file.flush()
    print "poap_py_log:" + info
    sys.stdout.flush()

def poap_log_close ():
    poap_log_file.close()

def abort_cleanup_exit () : 
    poap_log("INFO: cleaning up")
    poap_log_close()
    exit(-1)


# get final image name based on actual box
try: root_path      = eval("%s_%s" % (protocol , "image_dir_src_root"), globals())
except: root_path   = ""
try: username       = eval("%s_%s" % (protocol , "username"), globals())
except: pass

#import shutil
#try: shutil.rmtree("%s.new" % image_dir_dst_u)
#except: pass
#os.mkdir("%s.new" % image_dir_dst_u)
#
#if not os.path.exists(image_dir_dst_u):
#    os.mkdir(image_dir_dst_u)

import signal
import string

# utility functions

def run_cli (cmd):
    poap_log("CLI : %s" % cmd)
    return cli(cmd)

def rm_rf (filename): 
    try: cli("delete %s" % filename)
    except: pass

# signal handling

def sig_handler_no_exit (signum, frame) : 
    poap_log("INFO: SIGTERM Handler while configuring boot variables")

def sigterm_handler (signum, frame): 
    poap_log("INFO: SIGTERM Handler") 
    abort_cleanup_exit()
    exit(1)

signal.signal(signal.SIGTERM, sigterm_handler)

# transfers file, return True on success; on error exits unless 'fatal' is False in which case we return False
def doCopy (protocol = "", host = "", source = "", dest = "", vrf = "management", login_timeout=10, user = "", password = "", fatal=True):
    rm_rf(dest)

    # mess with source paths (tftp does not like full paths)
    global username, root_path
    source = source[len(root_path):]

    cmd = "terminal dont-ask ; terminal password %s ; " % password
    if protocol == "http":
        cmd += "copy %s://%s%s %s vrf %s" % (protocol, host, source, dest, vrf)
    else :
        cmd += "copy %s://%s@%s%s %s vrf %s" % (protocol, username, host, source, dest, vrf)

    try: run_cli(cmd)
    except:
        poap_log("WARN: Copy Failed: %s" % str(sys.exc_value).strip('\n\r'))
        if fatal:
            poap_log("ERR : aborting")
            abort_cleanup_exit()
            exit(1)
        return False
    return True


def verify_target_image ():

    print "show version image %s" % system_image_dst
    sys_cmd="show version image %s" % system_image_dst
    sys_msg=cli(sys_cmd)
    sys_v=sys_msg.split()
    print "system image Values: %s " % (sys_v[2])
    if (sys_v[2] == "Passed"):
        check_version = sys_v[8]
        print "system image value is : %s" % check_version 
        # Now double check to ensure version matches desired
        if check_version == desired_version:
            poap_log("INFO: Verification passed. (system : %s)" % check_version)
            return True
        else:
            poap_log("INFO : Verification failed!, image contents do not match name, need to replace image")
            return False
    else:
        poap_log("INFO : Verification failed!, need to replace image")
        poap_log("%s" % (sys_msg))
        return False

def verify_running_version ():
    sys_cmd="show version | inc NXOS:"
    sys_msg=cli(sys_cmd)
    check_version = sys_msg.split()[2]
    if check_version == desired_version:
        poap_log("Running image matches desired version")
        return True
    poap_log("Running image does not match desired version, update")
    return False 
    

# get config file from server
def get_config ():
    doCopy(protocol, hostname, config_file_src, config_file_dst, vrf, config_timeout, username, password)
    poap_log("INFO: Completed Copy of Config File") 

# get image file from server
def get_image ():
    doCopy(protocol, hostname, system_image_src, system_image_dst, vrf, system_timeout, username, password)
    poap_log("INFO: Completed Copy of System File") 

def wait_box_online ():
    while 1:
        r=int(run_cli("show system internal platform internal info | grep box_online | sed 's/[^0-9]*//g'").strip('\n'))
        if r==1: break
        else: time.sleep(5)
        poap_log("INFO: Waiting for box online...")


# install (make persistent) images and config 
def install_it (): 
    # make sure box is online
    wait_box_online()

    poap_log("INFO: Setting the boot variables")
    try:
        run_cli("config terminal ; boot nxos %s" % system_image_dst)
        run_cli("copy running-config startup-config")
        run_cli('copy %s scheduled-config' % config_file_dst)
    except:
        poap_log("ERR : setting bootvars or copy run start failed!")
        abort_cleanup_exit()
    # no need to delete config_file_dst, it is in /volatile, we will reboot....
    # do it anyway so we don't have permission issues when testing script and
    # running as different users (log file have timestamp, so fine)
    poap_log("INFO: Configuration successful")

        
# Verify if free space is available to download config, kickstart and 
# system images
def verify_freespace (): 
    freespace = int(cli("dir bootflash: | last 3 | grep free | sed 's/[^0-9]*//g'").strip('\n'))
    freespace = freespace / 1024
    poap_log("INFO: free space is %s kB"  % freespace )

    if required_space > freespace:
        poap_log("ERR : Not enough space to copy the config, and system image, aborting!")
        abort_cleanup_exit()


# Main  

verify_freespace()
get_config()
signal.signal(signal.SIGTERM, sig_handler_no_exit)
if verify_running_version():
    # Don't need to do anything with image or version here, just do config
    install_it() 
else:
    # Updaing version, either through image on bootflash, or new image 
    if verify_target_image():
        poap_log("Found matching image in bootflash, installing.")
        install_it()
    else:
        poap_log("Getting image from server")
        get_image()
        install_it()

poap_log_close()
exit(0)
